[
  {
    "id": 1,
    "title": "Next.js 시작하기: 파일 기반 라우팅의 모든 것",
    "text": "Next.js는 React 기반의 풀스택 프레임워크로, 파일 기반 라우팅을 통해 개발자가 더 쉽게 웹 애플리케이션을 구축할 수 있게 해줍니다. pages 폴더에 파일을 생성하면 자동으로 라우트가 생성되며, 동적 라우팅도 [id].tsx와 같은 형태로 간단하게 구현할 수 있습니다. 이번 포스트에서는 Next.js의 기본 라우팅부터 고급 기능까지 상세히 알아보겠습니다."
  },
  {
    "id": 2,
    "title": "TypeScript와 React: 타입 안정성으로 더 나은 코드 작성하기",
    "text": "TypeScript는 JavaScript에 정적 타입을 추가한 언어로, React와 함께 사용하면 개발 생산성과 코드 품질을 크게 향상시킬 수 있습니다. 컴포넌트의 props 타입 정의, 상태 관리에서의 타입 안정성, 그리고 커스텀 훅에서의 타입 활용까지 실제 프로젝트에서 자주 사용되는 패턴들을 예제와 함께 살펴보겠습니다."
  },
  {
    "id": 3,
    "title": "React Hooks 완벽 가이드: useState부터 커스텀 훅까지",
    "text": "React 16.8에서 도입된 Hooks는 함수형 컴포넌트에서도 상태 관리와 생명주기 기능을 사용할 수 있게 해주었습니다. useState, useEffect, useContext 등 기본 훅들의 사용법부터 useCallback, useMemo를 활용한 성능 최적화, 그리고 재사용 가능한 커스텀 훅 작성법까지 단계별로 학습해보겠습니다."
  },
  {
    "id": 4,
    "title": "CSS-in-JS vs Tailwind CSS: 스타일링 방법론 비교",
    "text": "모던 프론트엔드 개발에서 스타일링은 중요한 선택 사항 중 하나입니다. styled-components 같은 CSS-in-JS 라이브러리와 Tailwind CSS 같은 유틸리티 퍼스트 프레임워크 각각의 장단점을 비교해보고, 프로젝트 특성에 따라 어떤 방법을 선택해야 하는지 실제 예제를 통해 알아보겠습니다."
  },
  {
    "id": 5,
    "title": "상태 관리의 진화: Redux에서 Zustand까지",
    "text": "React 애플리케이션의 복잡도가 증가하면서 상태 관리는 필수 요소가 되었습니다. Redux의 복잡한 보일러플레이트부터 Context API의 한계, 그리고 최근 주목받는 Zustand, Jotai 같은 경량 상태 관리 라이브러리들의 특징과 사용법을 비교 분석해보겠습니다. 언제 어떤 도구를 선택해야 하는지도 함께 다룹니다."
  },
  {
    "id": 6,
    "title": "Next.js 13 App Router: 새로운 라우팅 시스템 마스터하기",
    "text": "Next.js 13에서 도입된 App Router는 기존 Pages Router와는 완전히 다른 접근 방식을 제공합니다. app 디렉토리 구조, Server Components와 Client Components의 구분, 새로운 데이터 페칭 방식, 그리고 레이아웃과 템플릿 활용법까지 실제 프로젝트 마이그레이션 경험을 바탕으로 상세히 설명드리겠습니다."
  },
  {
    "id": 7,
    "title": "웹 성능 최적화: Core Web Vitals 개선하기",
    "text": "사용자 경험과 SEO에 직접적인 영향을 미치는 웹 성능 최적화는 현대 웹 개발의 핵심입니다. LCP, FID, CLS 등 Core Web Vitals 지표의 의미와 측정 방법, 그리고 이미지 최적화, 코드 스플리팅, 레이지 로딩 등 실제 최적화 기법들을 Next.js 환경에서 구현하는 방법을 다루겠습니다."
  },
  {
    "id": 8,
    "title": "API 설계와 데이터 페칭: SWR vs React Query 비교",
    "text": "모던 웹 애플리케이션에서 서버 데이터 관리는 복잡한 과제입니다. SWR과 React Query(TanStack Query)는 이러한 문제를 해결하는 대표적인 라이브러리들입니다. 캐싱 전략, 백그라운드 업데이트, 에러 처리, 낙관적 업데이트 등 각 라이브러리의 특징을 실제 코드 예제와 함께 비교해보겠습니다."
  },
  {
    "id": 9,
    "title": "테스트 주도 개발: Jest와 Testing Library로 견고한 컴포넌트 만들기",
    "text": "안정적인 프론트엔드 애플리케이션을 위해서는 체계적인 테스트가 필수입니다. Jest와 React Testing Library를 활용한 단위 테스트 작성법부터 사용자 시나리오 기반의 통합 테스트, 그리고 MSW를 활용한 API 모킹까지 실제 프로젝트에서 적용할 수 있는 테스트 전략을 단계별로 소개합니다."
  },
  {
    "id": 10,
    "title": "모노레포 구축하기: Turborepo로 여러 프로젝트 효율적으로 관리하기",
    "text": "대규모 프론트엔드 프로젝트에서는 여러 애플리케이션과 패키지를 효율적으로 관리하는 것이 중요합니다. Turborepo를 활용한 모노레포 구축 방법, 공통 컴포넌트 라이브러리 개발, 빌드 캐싱과 병렬 처리를 통한 개발 속도 향상, 그리고 배포 자동화까지 실무에서 바로 적용할 수 있는 노하우를 공유합니다."
  }
]